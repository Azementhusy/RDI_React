{"ast":null,"code":"var _jsxFileName = \"D:\\\\CODE\\\\Web Development Projects\\\\React\\\\RDI_react\\\\src\\\\components\\\\App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Question from \"./Question\";\nimport OptionArea from \"./OptionArea\";\nimport NextButton from \"./NextButton\";\nimport BackButton from \"./BackButton\";\nimport questions from \"./questions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [selectedValues, setSelectedValues] = useState({});\n  const [flashActive, setFlashActive] = useState(false);\n  const currentQuestion = questions[currentQuestionIndex];\n  const handleOptionClick = value => {\n    setSelectedValues({\n      ...selectedValues,\n      [currentQuestion.id]: value\n    });\n    setFlashActive(false);\n  };\n\n  //Handle NextButton\n  const handleNextClick = () => {\n    //if not yet choose answer\n    if (selectedValues[currentQuestion.id] == null) {\n      setFlashActive(true);\n      setTimeout(() => {\n        setFlashActive(false);\n      }, 1000);\n      return;\n    }\n    if (currentQuestionIndex < questions.length - 1) {\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n    } else {\n      //Done all the questions\n      alert(\"You've done all the questions\");\n    }\n  };\n\n  //Handle BackButton\n  const handleBackClick = () => {\n    if (currentQuestionIndex > 0) {\n      setCurrentQuestionIndex(currentQuestionIndex - 1);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Hello CodeSandbox\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Question, {\n      text: currentQuestion.text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(OptionArea, {\n      options: currentQuestion.options,\n      selectedValue: selectedValues[currentQuestion.id],\n      onOptionClick: handleOptionClick,\n      flashActive: flashActive\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(BackButton, {\n      onClick: handleBackClick,\n      disabled: currentQuestionIndex === 0\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NextButton, {\n      onClick: handleNextClick,\n      isLastQuestion: currentQuestionIndex === questions.length - 1\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"R9JlLGV2MBBzcQr9Oc9lfadPyVo=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Question","OptionArea","NextButton","BackButton","questions","jsxDEV","_jsxDEV","App","_s","currentQuestionIndex","setCurrentQuestionIndex","selectedValues","setSelectedValues","flashActive","setFlashActive","currentQuestion","handleOptionClick","value","id","handleNextClick","setTimeout","length","alert","handleBackClick","className","children","fileName","_jsxFileName","lineNumber","columnNumber","text","options","selectedValue","onOptionClick","onClick","disabled","isLastQuestion","_c","$RefreshReg$"],"sources":["D:/CODE/Web Development Projects/React/RDI_react/src/components/App.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport Question from \"./Question\";\r\nimport OptionArea from \"./OptionArea\";\r\nimport NextButton from \"./NextButton\";\r\nimport BackButton from \"./BackButton\";\r\nimport questions from \"./questions\";\r\n\r\nfunction App() {\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n  const [selectedValues, setSelectedValues] = useState({});\r\n  const [flashActive, setFlashActive] = useState(false);\r\n  const currentQuestion = questions[currentQuestionIndex];\r\n\r\n  const handleOptionClick = (value) => {\r\n    setSelectedValues({\r\n      ...selectedValues,\r\n      [currentQuestion.id]: value,\r\n    });\r\n    setFlashActive(false);\r\n  };\r\n\r\n  //Handle NextButton\r\n  const handleNextClick = () => {\r\n    //if not yet choose answer\r\n    if (selectedValues[currentQuestion.id] == null) {\r\n      setFlashActive(true);\r\n      setTimeout(() => {\r\n        setFlashActive(false);\r\n      }, 1000);\r\n      return;\r\n    }\r\n    if (currentQuestionIndex < questions.length - 1) {\r\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\r\n    } else {\r\n      //Done all the questions\r\n      alert(\"You've done all the questions\");\r\n    }\r\n  };\r\n\r\n  //Handle BackButton\r\n  const handleBackClick = () => {\r\n    if (currentQuestionIndex > 0) {\r\n      setCurrentQuestionIndex(currentQuestionIndex - 1);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Hello CodeSandbox</h1>\r\n      <Question text={currentQuestion.text} />\r\n      <OptionArea\r\n        options={currentQuestion.options}\r\n        selectedValue={selectedValues[currentQuestion.id]}\r\n        onOptionClick={handleOptionClick}\r\n        flashActive={flashActive}\r\n      />\r\n\r\n      <BackButton\r\n        onClick={handleBackClick}\r\n        disabled={currentQuestionIndex === 0}\r\n      />\r\n      <NextButton\r\n        onClick={handleNextClick}\r\n        isLastQuestion={currentQuestionIndex === questions.length - 1}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}